const AWS = require('aws-sdk');

var EcsController = function(tagName) {
  this.tagName = tagName;
  this.enabledValues = ['ON', 'On', 'on', 'TRUE', 'True', 'true', '1'];
}

EcsController.prototype.start = function() {
  var ecs = new AWS.ECS();
  var tagName = this.tagName;
  var enabledValues = this.enabledValues;
  var func = this.update;

  ecs.listClusters({}, function(err, data) {
    if (err) { console.log(err, err.stack); return }

    data.clusterArns.forEach(function(clusterArn) {

      ecs.listTagsForResource({ resourceArn: clusterArn }, function(err, data) {
        if (err) { console.log(err, err.stack); return; }

        let tags = {};
        data.tags.forEach(function(tag) { tags[tag.key] = tag.value; });
        if (!tags[tagName] || !enabledValues.includes(tags[tagName])) return;

        func(clusterArn, tags['default-desired-count'] || 1);
      });
    });
  });
}

EcsController.prototype.stop = function() {
  var ecs = new AWS.ECS();
  var tagName = this.tagName;
  var enabledValues = this.enabledValues;
  var func = this.update;

  ecs.listClusters({}, function(err, data) {
    if (err) { console.log(err, err.stack); return }

    data.clusterArns.forEach(function(clusterArn) {
      ecs.listTagsForResource({ resourceArn: clusterArn }, function(err, data) {
        if (err) { console.log(err, err.stack); return; }

        let tags = {};
        data.tags.forEach(function(tag) { tags[tag.key] = tag.value; });
        if (!tags[tagName] || !enabledValues.includes(tags[tagName])) return;

        func(clusterArn, 0);
      });
    });
  });
}

EcsController.prototype.update = function(clusterArn, desiredCount) {
  var ecs = new AWS.ECS();

  ecs.listServices({cluster: clusterArn}, function(err, data) {
    if (err) { console.log(err, err.stack); return }

    data.serviceArns.forEach(function(serviceArn) {
      let params = {
        cluster: clusterArn,
        service: serviceArn,
        desiredCount: desiredCount
      };
      ecs.updateService(params, function(err, data) {
        if (err) console.log(err, err.stack);
        else     console.log(data);
      });
    });
  });
};

module.exports = EcsController;
